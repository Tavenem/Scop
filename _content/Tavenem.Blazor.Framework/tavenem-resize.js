class e{constructor(e){this._dotNetRef=e,this._observervedElements=[],this._throttleResizeHandlerId=-1,this._resizeObserver=new ResizeObserver((e=>{const t=[];for(const s of e){const e=s.target,i=this._observervedElements.find((t=>t.element==e));i&&(i.isInitilized?t.push({id:i.id,size:s.target.getBoundingClientRect()}):i.isInitilized=!0)}t.length>0&&(this._throttleResizeHandlerId>=0&&clearTimeout(this._throttleResizeHandlerId),this._throttleResizeHandlerId=window.setTimeout(this.resizeHandler.bind(this,t),200))}))}resizeHandler(e){if(this._dotNetRef)try{this._dotNetRef.invokeMethodAsync("OnSizeChanged",e)}catch(e){console.error("Error in OnSizeChanged handler:",{error:e})}}connect(e,t){const s=[];for(let i=0;i<e.length;i++){const n=e[i],r=t[i];s.push(n.getBoundingClientRect()),-1===this._observervedElements.findIndex((e=>e.id===r))&&(this._observervedElements.push({element:n,id:r,isInitilized:!1}),this._resizeObserver.observe(n))}return s}disconnect(e){const t=this._observervedElements.find((t=>t.id==e));if(t){const e=t.element;this._resizeObserver.unobserve(e);const s=this._observervedElements.indexOf(t);this._observervedElements.splice(s,1)}}dispose(){this._resizeObserver.disconnect(),this._dotNetRef=void 0}}const t={};function s(s,i,n,r){if(!t[s]){const n=new e(i);t[s]=n}return t[s].connect(n,r)}function i(e,s){const i=t[e];i&&i.disconnect(s)}function n(e){const s=t[e];s&&(s.dispose(),delete t[e])}export{s as connect,i as disconnect,n as dispose};
//# sourceMappingURL=tavenem-resize.js.map
