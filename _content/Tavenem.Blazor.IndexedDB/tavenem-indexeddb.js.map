{
  "version": 3,
  "sources": ["../../../../assets/node_modules/idb/build/index.js", "../../../../assets/tavenem-indexeddb.ts"],
  "sourcesContent": ["const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst transactionDoneMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    // This mapping exists in reverseTransformCache but doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(this.request);\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nconst advanceMethodProps = ['continue', 'continuePrimaryKey', 'advance'];\nconst methodMap = {};\nconst advanceResults = new WeakMap();\nconst ittrProxiedCursorToOriginalProxy = new WeakMap();\nconst cursorIteratorTraps = {\n    get(target, prop) {\n        if (!advanceMethodProps.includes(prop))\n            return target[prop];\n        let cachedFunc = methodMap[prop];\n        if (!cachedFunc) {\n            cachedFunc = methodMap[prop] = function (...args) {\n                advanceResults.set(this, ittrProxiedCursorToOriginalProxy.get(this)[prop](...args));\n            };\n        }\n        return cachedFunc;\n    },\n};\nasync function* iterate(...args) {\n    // tslint:disable-next-line:no-this-assignment\n    let cursor = this;\n    if (!(cursor instanceof IDBCursor)) {\n        cursor = await cursor.openCursor(...args);\n    }\n    if (!cursor)\n        return;\n    cursor = cursor;\n    const proxiedCursor = new Proxy(cursor, cursorIteratorTraps);\n    ittrProxiedCursorToOriginalProxy.set(proxiedCursor, cursor);\n    // Map this double-proxy back to the original, so other cursor methods work.\n    reverseTransformCache.set(proxiedCursor, unwrap(cursor));\n    while (cursor) {\n        yield proxiedCursor;\n        // If one of the advancing methods was not called, call continue().\n        cursor = await (advanceResults.get(proxiedCursor) || cursor.continue());\n        advanceResults.delete(proxiedCursor);\n    }\n}\nfunction isIteratorProp(target, prop) {\n    return ((prop === Symbol.asyncIterator &&\n        instanceOfAny(target, [IDBIndex, IDBObjectStore, IDBCursor])) ||\n        (prop === 'iterate' && instanceOfAny(target, [IDBIndex, IDBObjectStore])));\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get(target, prop, receiver) {\n        if (isIteratorProp(target, prop))\n            return iterate;\n        return oldTraps.get(target, prop, receiver);\n    },\n    has(target, prop) {\n        return isIteratorProp(target, prop) || oldTraps.has(target, prop);\n    },\n}));\n\nexport { deleteDB, openDB, unwrap, wrap };\n", "import { openDB, deleteDB, IDBPCursorWithValue } from 'idb';\n\ninterface DatabaseInfo {\n    databaseName: string;\n    storeName: string | undefined | null;\n    version: number | undefined | null;\n    keyPath: string | undefined | null;\n    storeNames: string[] | undefined | null;\n}\n\ninterface CursorInfo {\n    db: DatabaseInfo;\n    cursor: IDBPCursorWithValue | null;\n}\n\nconst cursors: Record<string, CursorInfo> = {};\n\nasync function openDatabase(databaseInfo: DatabaseInfo) {\n    if (databaseInfo.version === null) {\n        databaseInfo.version = undefined;\n    }\n    databaseInfo.keyPath ??= 'id';\n\n    try {\n        const database = await openDB(\n            databaseInfo.databaseName,\n            databaseInfo.version, {\n                upgrade(db) {\n                    if (databaseInfo.storeNames) {\n                        for (const storeName of databaseInfo.storeNames) {\n                            if (!db.objectStoreNames.contains(storeName)) {\n                                db.createObjectStore(storeName, {\n                                    keyPath: databaseInfo.keyPath,\n                                });\n                            }\n                        }\n                    }\n                    if (db.objectStoreNames.length == 0\n                        && !db.objectStoreNames.contains(databaseInfo.databaseName)) {\n                        db.createObjectStore(databaseInfo.databaseName, {\n                            keyPath: databaseInfo.keyPath,\n                        });\n                    }\n                }\n            });\n        return database;\n    } catch (e) {\n        console.error(e);\n        return null;\n    }\n}\n\nexport async function clear(databaseInfo: DatabaseInfo) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return;\n    }\n    try {\n        return await db.clear(databaseInfo.storeName ?? databaseInfo.databaseName);\n    } catch (e) {\n        console.error(e);\n    }\n}\n\nexport async function count(databaseInfo: DatabaseInfo) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return 0;\n    }\n    try {\n        return await db.count(databaseInfo.storeName ?? databaseInfo.databaseName);\n    } catch (e) {\n        console.error(e);\n        return 0;\n    }\n}\n\nexport async function deleteDatabase(name: string) {\n    try {\n        await deleteDB(name);\n    } catch (e) {\n        console.error(e);\n    }\n}\n\nexport async function deleteValue(databaseInfo: DatabaseInfo, key: IDBValidKey) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return false;\n    }\n    try {\n        await db.delete(databaseInfo.storeName ?? databaseInfo.databaseName, key);\n        return true;\n    } catch (e) {\n        console.error(e);\n        return false;\n    }\n}\n\nexport async function getAll(databaseInfo: DatabaseInfo) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return [];\n    }\n    try {\n        return await db.getAll(databaseInfo.storeName ?? databaseInfo.databaseName);\n    } catch (e) {\n        console.error(e);\n        return [];\n    }\n}\n\nexport async function getAllStrings(databaseInfo: DatabaseInfo) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return [];\n    }\n    try {\n        var items = await db.getAll(databaseInfo.storeName ?? databaseInfo.databaseName);\n        return items.map(v => JSON.stringify(v));\n    } catch (e) {\n        console.error(e);\n        return [];\n    }\n}\n\nexport async function getBatch(databaseInfo: DatabaseInfo, reset: boolean) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return [];\n    }\n    const cursorKey = databaseInfo.databaseName + '.' + databaseInfo.storeName;\n    if (reset) {\n        delete cursors[cursorKey];\n    }\n    let cursorInfo = cursors[cursorKey];\n    if (!cursorInfo || cursorInfo.db.version != databaseInfo.version) {\n        try {\n            const cursor = await db.transaction(databaseInfo.storeName ?? databaseInfo.databaseName).store.openCursor();\n            cursorInfo = {\n                db: databaseInfo,\n                cursor,\n            };\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    if (!cursorInfo) {\n        return [];\n    }\n    const items = [];\n    try {\n        while (cursorInfo.cursor && items.length < 20) {\n            items.push(cursorInfo.cursor.value);\n            cursorInfo.cursor = await cursorInfo.cursor.continue();\n        }\n    } catch (e) {\n        console.error(e);\n    }\n    return items;\n}\n\nexport async function getBatchStrings(databaseInfo: DatabaseInfo, reset: boolean) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return [];\n    }\n    const cursorKey = databaseInfo.databaseName + '.' + databaseInfo.storeName;\n    if (reset) {\n        delete cursors[cursorKey];\n    }\n    let cursorInfo = cursors[cursorKey];\n    if (!cursorInfo || cursorInfo.db.version != databaseInfo.version) {\n        try {\n            const cursor = await db.transaction(databaseInfo.storeName ?? databaseInfo.databaseName).store.openCursor();\n            cursorInfo = {\n                db: databaseInfo,\n                cursor,\n            };\n        } catch (e) {\n            console.error(e);\n        }\n    }\n    if (!cursorInfo) {\n        return [];\n    }\n    const items = [];\n    try {\n        while (cursorInfo.cursor && items.length < 20) {\n            items.push(JSON.stringify(cursorInfo.cursor.value));\n            cursorInfo.cursor = await cursorInfo.cursor.continue();\n        }\n    } catch (e) {\n        console.error(e);\n    }\n    return items;\n}\n\nexport async function getValue(databaseInfo: DatabaseInfo, key: IDBValidKey) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return null;\n    }\n    try {\n        return await db.get(databaseInfo.storeName ?? databaseInfo.databaseName, key);\n    } catch (e) {\n        console.error(e);\n        return null;\n    }\n}\n\nexport async function getValueString(databaseInfo: DatabaseInfo, key: IDBValidKey) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return null;\n    }\n    try {\n        return JSON.stringify(await db.get(databaseInfo.storeName ?? databaseInfo.databaseName, key));\n    } catch (e) {\n        console.error(e);\n        return null;\n    }\n}\n\nexport async function putValue(databaseInfo: DatabaseInfo, value: string) {\n    const db = await openDatabase(databaseInfo);\n    if (!db) {\n        return false;\n    }\n    try {\n        await db.put(databaseInfo.storeName ?? databaseInfo.databaseName, JSON.parse(value));\n        return true;\n    } catch (e) {\n        console.error(e);\n        return false;\n    }\n}\n"],
  "mappings": "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",
  "names": ["instanceOfAny", "object", "constructors", "c", "idbProxyableTypes", "cursorAdvanceMethods", "getIdbProxyableTypes", "getCursorAdvanceMethods", "transactionDoneMap", "transformCache", "reverseTransformCache", "promisifyRequest", "request", "promise", "resolve", "reject", "unlisten", "success", "error", "wrap", "cacheDonePromiseForTransaction", "tx", "done", "complete", "idbProxyTraps", "target", "prop", "receiver", "value", "replaceTraps", "callback", "wrapFunction", "func", "args", "unwrap", "transformCachableValue", "newValue", "openDB", "name", "version", "blocked", "upgrade", "blocking", "terminated", "openPromise", "event", "db", "deleteDB", "readMethods", "writeMethods", "cachedMethods", "getMethod", "targetFuncName", "useIndex", "isWrite", "method", "storeName", "oldTraps", "advanceMethodProps", "methodMap", "advanceResults", "ittrProxiedCursorToOriginalProxy", "cursorIteratorTraps", "cachedFunc", "iterate", "cursor", "proxiedCursor", "isIteratorProp", "cursors", "openDatabase", "databaseInfo", "openDB", "db", "storeName", "e", "clear", "count", "deleteDatabase", "name", "deleteDB", "deleteValue", "key", "getAll", "getAllStrings", "items", "v", "getBatch", "reset", "cursorKey", "cursorInfo", "cursor", "getBatchStrings", "getValue", "getValueString", "putValue", "value"]
}
