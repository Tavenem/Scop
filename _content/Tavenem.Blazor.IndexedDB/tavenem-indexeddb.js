let e,t;const n=new WeakMap,r=new WeakMap,a=new WeakMap,o=new WeakMap,s=new WeakMap;let c={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return r.get(e);if("objectStoreNames"===t)return e.objectStoreNames||a.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return d(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function i(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(t||(t=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(l(this),t),d(n.get(this))}:function(...t){return d(e.apply(l(this),t))}:function(t,...n){const r=e.call(l(this),t,...n);return a.set(r,t.sort?t.sort():[t]),d(r)}}function u(t){return"function"==typeof t?i(t):(t instanceof IDBTransaction&&function(e){if(r.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",o),e.removeEventListener("abort",o)},a=()=>{t(),r()},o=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",a),e.addEventListener("error",o),e.addEventListener("abort",o)}));r.set(e,t)}(t),n=t,(e||(e=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(t,c):t);var n}function d(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",a),e.removeEventListener("error",o)},a=()=>{t(d(e.result)),r()},o=()=>{n(e.error),r()};e.addEventListener("success",a),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&n.set(t,e)})).catch((()=>{})),s.set(t,e),t}(e);if(o.has(e))return o.get(e);const t=u(e);return t!==e&&(o.set(e,t),s.set(t,e)),t}const l=e=>s.get(e);const f=["get","getKey","getAll","getAllKeys","count"],y=["put","add","delete","clear"],m=new Map;function p(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(m.get(t))return m.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,a=y.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!a&&!f.includes(n))return;const o=async function(e,...t){const o=this.transaction(e,a?"readwrite":"readonly");let s=o.store;return r&&(s=s.index(t.shift())),(await Promise.all([s[n](...t),a&&o.done]))[0]};return m.set(t,o),o}async function b(e){null===e.version&&(e.version=void 0),e.keyPath??(e.keyPath="id");try{return await function(e,t,{blocked:n,upgrade:r,blocking:a,terminated:o}={}){const s=indexedDB.open(e,t),c=d(s);return r&&s.addEventListener("upgradeneeded",(e=>{r(d(s.result),e.oldVersion,e.newVersion,d(s.transaction))})),n&&s.addEventListener("blocked",(()=>n())),c.then((e=>{o&&e.addEventListener("close",(()=>o())),a&&e.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),c}(e.databaseName,e.version,{upgrade(t){t.createObjectStore(e.storeName??e.databaseName,{keyPath:e.keyPath})}})}catch(e){return console.error(e),null}}async function h(e,t){const n=await b(e);if(n)try{await n.add(e.storeName??e.databaseName,t)}catch(e){console.error(e)}}async function w(e){const t=await b(e);if(t)try{return await t.clear(e.storeName??e.databaseName)}catch(e){console.error(e)}}async function v(e){const t=await b(e);if(!t)return 0;try{return await t.count(e.storeName??e.databaseName)}catch(e){return console.error(e),0}}async function D(e){try{await function(e,{blocked:t}={}){const n=indexedDB.deleteDatabase(e);return t&&n.addEventListener("blocked",(()=>t())),d(n).then((()=>{}))}(e)}catch(e){console.error(e)}}async function g(e,t){const n=await b(e);if(n)try{return await n.delete(e.storeName??e.databaseName,t)}catch(e){console.error(e)}}async function N(e){const t=await b(e);if(!t)return[];try{return await t.getAll(e.storeName??e.databaseName)}catch(e){return console.error(e),[]}}async function I(e,t){const n=await b(e);if(!n)return null;try{return await n.get(e.storeName??e.databaseName,t)}catch(e){return console.error(e),null}}async function B(e,t){const n=await b(e);if(n)try{await n.put(e.storeName??e.databaseName,t)}catch(e){console.error(e)}}c=(e=>({...e,get:(t,n,r)=>p(t,n)||e.get(t,n,r),has:(t,n)=>!!p(t,n)||e.has(t,n)}))(c);export{h as addValue,w as clear,v as count,D as deleteDatabase,g as deleteValue,N as getAll,I as getValue,B as putValue};
//# sourceMappingURL=tavenem-indexeddb.js.map
