@using Scop.Enums
<Dialog>
    <ChildContent>
        <TextInput Label="Name" @bind-Value="Trait.Name" />
        <NumericInput Label="Weight" @bind-Value="Trait.Weight" Min="0.0" />
        <Select Label="Choice Type"
                TValue="ChoiceType"
                @bind-Value="Trait.ChoiceType">
            @foreach (var type in Enum.GetValues<ChoiceType>())
            {
                <Option Label="@type.ToHumanReadable()" Value="type" />
            }
        </Select>
        @switch (Trait.ChoiceType)
        {
            case ChoiceType.Category:
                <p>
                    All children with a non-zero weight are automatically selected when this trait is selected.
                </p>
                break;
            case ChoiceType.Manual:
                <p>
                    No children are automatically selected, but any number may be selected by hand.
                </p>
                break;
            case ChoiceType.Single:
                <p>
                    One child is selected at random when this trait is selected, if there are any with a non-zero weight.
                </p>
                <p>
                    Only one child may be selected at a time. Selecting any child will de-select all others.
                </p>
                break;
            case ChoiceType.OneOrMore:
                <p>
                    One child is selected at random when this trait is selected, if there are any with a non-zero weight.
                </p>
                <p>
                    Any number of children may be selected at a time.
                </p>
                break;
            case ChoiceType.Multiple:
                <p>
                    When this trait is selected, each child is selected or not based on its weight, which is treated as a probability.
                </p>
                <p>
                    Any number of children may be selected at a time.
                </p>
                break;
        }
        @if (Trait.ChoiceType is ChoiceType.Single or ChoiceType.OneOrMore)
        {
            <div class="row">
                <Checkbox Label="Can Choose None"
                          @bind-Value="Trait.CanChooseNone">
                    <Tooltip Delay="750">Selecting no children is allowed</Tooltip>
                </Checkbox>
                <NumericInput Label="None Weight"
                                @bind-Value="Trait.NoneWeight"
                                Min="0.0"
                                HelpText="Weight assigned to choosing no child trait" />
            </div>
        }
        <Checkbox Label="Is Chosen on None"
                  @bind-Value="Trait.IsChosenOnNone">
            <Tooltip Delay="750">Whether this option is selected if no selection is made among its children</Tooltip>
        </Checkbox>
        <div class="card mt-3">
            <div class="header">
                <h6>Modifiers</h6>
            </div>
            <div class="body">
                <p>
                    A collection of conditions which may override the effective weight of this trait.
                </p>
                <ul class="list">
                    @if (Trait.Modifiers is not null)
                    {
                        for (var i = 0; i < Trait.Modifiers.Count; i++)
                        {
                            var index = i;
                            <li class="d-flex justify-content-space-between">
                                <span>Modifier @(index.ToString())</span>
                                <div>
                                    <button class="btn btn-icon primary" @onclick="@(_ => OnEditModifierAsync(Trait.Modifiers[index]))"><tf-icon>edit</tf-icon></button>
                                    <button class="btn btn-icon danger" @onclick="@(_ => OnDeleteModifier(index))"><tf-icon>delete</tf-icon></button>
                                </div>
                            </li>
                        }
                    }
                    <li>
                        <button class="btn btn-icon primary" @onclick="@(_ => OnEditModifierAsync(null))"><tf-icon>add</tf-icon></button>
                    </li>
                </ul>
            </div>
        </div>
    </ChildContent>
    <FooterContent>
        <button class="btn btn-text primary" @onclick="@(_ => Dialog?.Close(Trait))">Done</button>
    </FooterContent>
</Dialog>