@using Scop.Enums
<Dialog>
    <ChildContent>
        <div class="row fill">
            <NumericInput Label="Weight"
                          Class="flex-grow-5"
                          @bind-Value="Modifier.Weight"
                          Disabled="Modifier.Force"
                          Min="0.0" />
            <Checkbox Label="Force" Class="flex-grow-4" @bind-Value="Modifier.Force">
                <Tooltip Delay="750">Trait is always selected if the modifier applies</Tooltip>
            </Checkbox>
        </div>
        <NumericInput Label="Priority"
                      @bind-Value="Modifier.Priority"
                      HelpText="Highest priority wins when multiple modifiers apply" />
        <div class="row fill">
            <NumericInput Label="Min Age" @bind-Value="Modifier.MinAge" Min="0" />
            <NumericInput Label="Max Age" @bind-Value="Modifier.MaxAge" Min="0" />
            <Select Label="Gender"
                    TValue="NameGender"
                    @bind-Value="Modifier.Gender"
                    Style="width: 100%"
                    HelpText="The affected gender (determined by the character's pronouns)">
                <Option Label="Any" Value="NameGender.None" />
                <Option Label="Female" Value="NameGender.Female" />
                <Option Label="Male" Value="NameGender.Male" />
            </Select>
        </div>
        <div class="card my-3">
            <div class="header">
                <h6>Ethnicities</h6>
            </div>
            <div class="body">
                <p>
                    A collection of semicolon-delimited strings indicating the full paths of
                    the ethnicities referenced by this modifier.
                </p>
                <p>
                    The modifier is active if any ethnicity is present.
                </p>
                <ul class="list">
                    @if (Modifier.Ethnicities is not null)
                    {
                        for (var i = 0; i < Modifier.Ethnicities.Count; i++)
                        {
                            var index = i;
                            <li @key="Modifier.Ethnicities[index]">
                                <div class="d-flex">
                                    <TextInput Class="dense"
                                               Value="@Modifier.Ethnicities[index]"
                                               ValueChanged="@(v => OnEditEthnicity(index, v))" />
                                    <button class="btn danger" @onclick="@(_ => OnRemoveEthnicity(index))"><tf-icon>delete</tf-icon></button>
                                </div>
                            </li>
                        }
                    }
                    <li>
                        <TextInput Class="dense"
                                   Value="@NewEthnicity"
                                   ValueChanged="OnSetNewEthnicity" />
                    </li>
                </ul>
            </div>
        </div>
        <div class="card">
            <div class="header">
                <h6>Traits</h6>
            </div>
            <div class="body">
                <p>
                    A collection of semicolon-delimited strings indicating the full paths of
                    the traits referenced by this modifier.
                </p>
                <p>The modifier is active if any trait is present.</p>
                <ul class="list">
                    @if (Modifier.TargetPaths is not null)
                    {
                        foreach (var path in Modifier.TargetPaths)
                        {
                            <li @key="path" class="d-flex">
                                <TextInput Class="dense"
                                           Value="@path"
                                           ValueChanged="@(v => OnTargetPathValueChanged(path, v))" />
                                <button class="btn danger" @onclick="@(_ => OnRemoveTargetPath(path))"><tf-icon>delete</tf-icon></button>
                            </li>
                        }
                    }
                    <li>
                        <TextInput Class="dense"
                                   Value="@NewTargetPath"
                                   ValueChanged="OnSetNewTargetPath" />
                    </li>
                </ul>
            </div>
        </div>
    </ChildContent>
    <FooterContent>
        <button class="btn btn-text" @onclick="@(_ => Dialog?.Close())">Cancel</button>
        <button class="btn btn-text primary" @onclick="@(_ => Dialog?.Close(Modifier))">Done</button>
    </FooterContent>
</Dialog>
