@if (TraitContainer is null)
{
    return;
}

@if (Traits is null)
{
    <button class="btn btn-icon"
            @onclick="OnNewTraitAsync">
        <tf-icon class="me-2">note_add</tf-icon>
        <Tooltip Delay="750">New trait</Tooltip>
    </button>
    return;
}

<div class="d-flex">
    <button class="btn btn-icon"
            @onclick="@(_ => OnRandomizeTraitsAsync())">
        <tf-icon>casino</tf-icon>
        <Tooltip Delay="750">Randomize traits</Tooltip>
    </button>
    <button class="btn btn-icon"
            @onclick="@(_ => OnRandomizeTraitsAsync(false))">
        <tf-icon>playlist_add</tf-icon>
        <Tooltip Delay="750">Add additional random traits without clearing the current set</Tooltip>
    </button>
</div>
<ElementList Items="Traits" ItemIsCollapsible="@(x => x.Children?.Count > 0)">
    <Template>
        <div class="d-inline-flex align-items-center flex-grow-1">
            <Checkbox Class="dense"
                      TValue="bool"
                      Value="TraitContainer.HasTrait(context)"
                      ValueChanged="@(v => OnTraitSelectAsync(v, context))" />
            <span class="me-auto">@context.Name</span>
            @if (context.Children?.Count > 0)
            {
                <button class="btn btn-icon small"
                        @onclick="@(_ => OnTraitSelectAsync(true, context))">
                    <tf-icon>playlist_add</tf-icon>
                    <Tooltip Delay="750">Select random children without clearing any</Tooltip>
                </button>
            }
            else
            {
                <button class="btn btn-icon small"
                        @onclick="@(_ => OnNewTraitAsync(context))">
                    <tf-icon>note_add</tf-icon>
                    <Tooltip Delay="750">New child trait</Tooltip>
                </button>
            }
            <button class="btn btn-icon small"
                    @onclick="@(_ => OnEditTraitAsync(context))">
                <tf-icon>edit</tf-icon>
                <Tooltip Delay="750">Edit</Tooltip>
            </button>
            <button class="btn btn-icon small"
                    @onclick="@(_ => OnDeleteTraitAsync(context))">
                <tf-icon>delete</tf-icon>
                <Tooltip Delay="750">Delete</Tooltip>
            </button>
        </div>
    </Template>
    <CollapsibleTemplate>
        <ElementList Items="context.Children" ItemIsCollapsible="@(x => x.Children?.Count > 0)">
            <FollowingContent>
                <button role="listitem"
                        class="clickable no-drag"
                        draggable="false"
                        @onclick="@(_ => OnNewTraitAsync(context))">
                    <tf-icon class="new-list-item">note_add</tf-icon>New trait
                </button>
            </FollowingContent>
        </ElementList>
    </CollapsibleTemplate>
    <FollowingContent>
        <button role="listitem"
                class="clickable no-drag"
                draggable="false"
                @onclick="OnNewTraitAsync">
            <tf-icon class="new-list-item">note_add</tf-icon>New trait
        </button>
    </FollowingContent>
</ElementList>
@if (!string.IsNullOrEmpty(TraitContainer.DisplayTraits))
{
    <h6>Summary</h6>
    <p>@(new MarkupString(TraitContainer.DisplayTraits))</p>
}