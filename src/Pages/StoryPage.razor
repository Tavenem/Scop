@page "/story/{id}"
@using Scop.Interfaces
@using Scop.Models

<PageTitle>Scop - @StoryName</PageTitle>

@if (_loading)
{
    <div class="d-flex justify-content-center align-self-stretch">
        <tf-progress-circle class="primary"></tf-progress-circle>
    </div>
    return;
}

@if (_story is null)
{
    <div class="d-flex flex-column align-items-center align-self-stretch">
        <Alert ThemeColor="ThemeColor.Warning">No such story</Alert>
        <p class="mt-3">
            <a href="./">Return to the main page</a> to try loading a different story.
        </p>
    </div>
    return;
}

<p>
    Generate a random writing prompt to help you get started:
    <button class="ms-2 btn primary" @onclick="OnWritingPromptAsync">Writing Prompt</button>
</p>

<TextInput Label="Story Title"
           Value="@_story.Name"
           ValueChanged="OnChangeStoryNameAsync"
           Class="align-self-stretch flex-grow-0" />
<Tabs TTabItem="object" Class="mt-2">
    <TabPanel TTabItem="object">
        <TabContent><tf-icon>edit_note</tf-icon>Notes</TabContent>
        <ChildContent>
            <div class="d-md-flex align-self-stretch">
                <div class="d-flex flex-column flex-shrink-0 flex-grow-1">
                    <ElementList TListItem="INote"
                                 Items="_story.Notes"
                                 SelectionType="SelectionType.Single"
                                 @bind-SelectedItem="TopSelectedNote"
                                 @bind-SelectedItem:after="OnSelectedNoteChangedAsync"
                                 ItemIsCollapsible="@(item => item.Notes?.Count > 0)"
                                 ItemIsDraggable="@(item => item is INote)"
                                 IsDragStart="true"
                                 IsDropTarget="true"
                                 DropEffect="DragEffect.Move"
                                 OnDrop="OnDropAsync"
                                 OnDropIndex="OnDropIndexAsync"
                                 OnDropped="OnDropped"
                                 Class="tree flex-shrink-0 flex-grow-1">
                        <Template>
                            <div class="@($"d-inline-flex align-items-center gap-2 flex-grow-1 {(context.IsUnnamed ? "text-muted" : null)}")">
                                <tf-icon>@_storyIcons[context.IconIndex]</tf-icon>
                                <span class="me-auto">@context.DisplayName</span>
                                @if (context is not Character)
                                {
                                    <button class="btn btn-icon" @onclick="@(_ => OnChangeNoteTypeAsync(context))">
                                        <tf-icon>@_storyIcons[1]</tf-icon>
                                        <Tooltip Delay="750">Make character note</Tooltip>
                                    </button>
                                }
                                @if (context.Notes is null || context.Notes.Count == 0)
                                {
                                    <button class="btn btn-icon"
                                            @onclick="@(_ => OnNewNoteAsync(context))">
                                        <tf-icon>note_add</tf-icon>
                                        <Tooltip Delay="750">New child note</Tooltip>
                                    </button>
                                }
                                <button class="btn btn-icon danger" @onclick="@(_ => OnDeleteNoteAsync(context))"><tf-icon>delete</tf-icon></button>
                            </div>
                        </Template>
                        <CollapsibleTemplate Context="note">
                            <ElementList @ref="note.List"
                                         TListItem="INote"
                                         Items="note.Notes"
                                         SelectionType="SelectionType.Single"
                                         SelectedItemChanged="OnSelectChildNoteAsync"
                                         ItemIsCollapsible="@(item => item.Notes?.Count > 0)"
                                         IsDragStart="true"
                                         IsDropTarget="true"
                                         OnDrop="@(e => OnDropAsync(e, note))"
                                         OnDropIndex="@(e => OnDropIndexAsync(e, note))"
                                         OnDropped="OnDropped">
                                <FollowingContent>
                                    <button role="listitem"
                                            class="clickable no-drag"
                                            draggable="false"
                                            @onclick="@(_ => OnNewNoteAsync(note))">
                                        <tf-icon class="new-list-item">note_add</tf-icon>New note
                                    </button>
                                </FollowingContent>
                            </ElementList>
                        </CollapsibleTemplate>
                        <FollowingContent>
                            <button role="listitem"
                                    class="clickable no-drag"
                                    draggable="false"
                                    @onclick="OnNewNoteAsync">
                                <tf-icon class="new-list-item">note_add</tf-icon>New note
                            </button>
                        </FollowingContent>
                    </ElementList>
                </div>
                <div class="d-flex flex-column flex-grow-1 ms-1">
                    @if (SelectedNote is not null)
                    {
                        <TextInput Value="@SelectedNote.Name"
                                   ValueChanged="OnSelectedNoteNameChangedAsync"
                                   Placeholder="@SelectedNote.PlaceholderName"
                                   Class="flex-grow-0" />
                        if (SelectedNote is Character character)
                        {
                            <CharacterNote Character="character" Story="_story" />
                        }
                        <Editor @bind-Value="@EditorContent"
                                @bind-Value:after="OnContentChangedAsync"
                                Syntax="EditorSyntax.Markdown"
                                Height="max(300px, calc(100vh - 491px))"
                                Class="flex-grow-1" />
                    }
                </div>
            </div>
        </ChildContent>
    </TabPanel>
    <TabPanel TTabItem="object">
        <TabContent><tf-icon>check_box</tf-icon>Traits</TabContent>
        <ChildContent>
            <TraitTree TraitContainer="_story" />
        </ChildContent>
    </TabPanel>
    <TabPanel TTabItem="object">
        <TabContent><tf-icon>timeline</tf-icon>Timeline</TabContent>
        <ChildContent>
            <ScopTimeline @bind-Categories="_story.EventCategories"
                          @bind-Events="_story.Events"
                          @bind-Now="_story.Now"
                          NowChange="OnNowChangeAsync"
                          Change="OnChangeAsync" />
        </ChildContent>
    </TabPanel>
</Tabs>